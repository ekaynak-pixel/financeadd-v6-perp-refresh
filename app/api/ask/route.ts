import {NextRequest,NextResponse} from 'next/server';import {getDB,getAnswer,saveAnswer,getSetting} from '../../../lib/db';export const runtime='nodejs';
type Provider={id:string;label:string;base_url:string;model:string;header_name:string;api_key:string;enabled:number;priority:number};
async function tryProvider(p:Provider,prompt:string){const body={model:p.model||'openrouter/auto',messages:[{role:'system',content:'You are an expert finance research assistant. Cite reputable sources when possible.'},{role:'user',content:prompt}],temperature:0.3};const headers:Record<string,string>={'Content-Type':'application/json'};headers[p.header_name||'Authorization']=p.header_name?.toLowerCase()==='authorization'?`Bearer ${p.api_key}`:p.api_key;const r=await fetch(p.base_url,{method:'POST',headers,body:JSON.stringify(body)});if(!r.ok) throw new Error(`provider_failed_${p.label}_${r.status}`);const data=await r.json();const text=data?.choices?.[0]?.message?.content||'';if(!text) throw new Error('empty_response');return text}
export async function POST(req:NextRequest){const {prompt}=await req.json();const offline=(getSetting('OFFLINE_MODE')||process.env.OFFLINE_MODE||'false').toString().toLowerCase()==='true';const term=(prompt||'').replace(/^.*?"(.+?)".*$/s,'$1').slice(0,300);if(offline){const cached=term?getAnswer(term):null;return NextResponse.json({text:cached||'',offline:true})}
const db=getDB();const providers:Provider[]=db.prepare('SELECT * FROM api_keys WHERE enabled=1 ORDER BY priority ASC').all();if((providers||[]).length===0&&process.env.OPENROUTER_API_KEY){providers.push({id:'env-openrouter',label:'OpenRouter (env)',base_url:'https://openrouter.ai/api/v1/chat/completions',model:process.env.OPENROUTER_MODEL||'openrouter/auto',header_name:'Authorization',api_key:process.env.OPENROUTER_API_KEY,enabled:1,priority:999} as any)}const cached=term?getAnswer(term):null;for(const p of providers){try{const text=await tryProvider(p,prompt);if(term&&text) saveAnswer(term,text);return NextResponse.json({text,provider:p.label})}catch(e){}}
return NextResponse.json({text:cached||'',degraded:true})}
